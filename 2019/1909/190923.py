# BOJ - 12100
from copy import deepcopy as copy
n = int(input())
arr = [[*map(int, input().split())] for _ in range(n)]
ans = 0
def func(arr, direct):
    _arr = [[0] * n for _ in range(n)]
    if direct == 0:
        for c in range(n):
            non_zero = []
            for r in range(n):
                if arr[r][c] > 0:
                    non_zero.append(arr[r][c])
            non_zero += [0] * (n - len(non_zero))
            for r in range(n):
                arr[r][c] = non_zero[r]
            r = 0
            i = 0
            while i < n-1 and r < n-1:
                if arr[i][c] == arr[i+1][c]:
                    _arr[r][c] = arr[i][c] * 2
                    r += 1
                    i += 2
                else:
                    _arr[r][c] = arr[i][c]
                    _arr[r+1][c] = arr[i+1][c]
                    r += 1
                    i += 1
            if i < n and r < n:
                _arr[r][c] = arr[i][c]
    elif direct == 1:
        for r in range(n):
            c = -1
            j = -1
            zero_cnt = arr[r].count(0)
            for _ in range(zero_cnt):
                arr[r].remove(0)
            arr[r] = [0] * zero_cnt + arr[r]
            while -n < j and -n < c:
                if arr[r][j] == arr[r][j - 1]:
                    _arr[r][c] = arr[r][j] * 2
                    c += -1
                    j += -2
                else:
                    _arr[r][c] = arr[r][j]
                    _arr[r][c-1] = arr[r][j-1]
                    c += -1
                    j += -1
            if j >= -n and c >= -n:
                _arr[r][c] = arr[r][j]
    elif direct == 2:
        for c in range(n):
            non_zero = []
            for r in range(1, n+1):
                if arr[-r][c] > 0:
                    non_zero.append(arr[-r][c])
            non_zero += [0] * (n - len(non_zero))
            for r in range(1, n+1):
                arr[-r][c] = non_zero[r-1]
            r = -1
            i = -1
            while -n < i and -n < r:
                if arr[i][c] == arr[i-1][c]:
                    _arr[r][c] = arr[i][c] * 2
                    r += -1
                    i += -2
                else:
                    _arr[r][c] = arr[i][c]
                    _arr[r-1][c] = arr[i-1][c]
                    r += -1
                    i += -1
            if i >= -n and r >= -n:
                _arr[r][c] = arr[i][c]
    else:
        for r in range(n):
            c = 0
            j = 0
            zero_cnt = arr[r].count(0)
            for _ in range(zero_cnt):
                arr[r].remove(0)
            arr[r] = arr[r] + [0] * zero_cnt
            while j < n-1 and c < n-1:
                if arr[r][j] == arr[r][j + 1]:
                    _arr[r][c] = arr[r][j] * 2
                    c += 1
                    j += 2
                else:
                    _arr[r][c] = arr[r][j]
                    _arr[r][c+1] = arr[r][j+1]
                    c += 1
                    j += 1
            if j < n and c < n:
                _arr[r][c] = arr[r][j]
    return _arr
def main(k, _arr):
    global ans
    if len(k) > 4:
        for row in _arr:
            ans = max(ans, *row)
        return
    for i in range(4):
        _arr_ = func(copy(_arr), i)
        main(k + '%s' % i, copy(_arr_))
    return
main('', arr)
print(ans)
"""
4
0 16 8 8
2 8 2 2
8 2 32 2
8 8 2 16

1
2

3
2 2 2
4 4 4
8 8 8

3
8 4 2
8 4 2
8 4 2

4
2 2 2 2
2 2 2 2
2 2 2 2
2 2 2 2

4
2 2 4 8
2 2 4 8
2 2 4 8
2 2 4 8

6
2 2 2 2 2 2
2 2 2 2 2 2
2 2 2 2 2 2
2 2 2 2 2 2
2 2 2 2 2 2
2 2 2 2 2 2

8
2 2 2 2 2 2 2 2
2 2 2 2 2 2 2 2
2 2 2 2 2 2 2 2
2 2 2 2 2 2 2 2
2 2 2 2 2 2 2 2
2 2 2 2 2 2 2 2
2 2 2 2 2 2 2 2
2 2 2 2 2 2 2 2

10
2 2 2 2 2 2 2 2 2 2 
2 2 2 2 2 2 2 2 2 2
2 2 2 2 2 2 2 2 2 2
2 2 2 2 2 2 2 2 2 2
2 2 2 2 2 2 2 2 2 2
2 2 2 2 2 2 2 2 2 2
2 2 2 2 2 2 2 2 2 2
2 2 2 2 2 2 2 2 2 2
2 2 2 2 2 2 2 2 2 2
2 2 2 2 2 2 2 2 2 2

2
8 16
16 8

4
8 16 0 0
0 0 16 8
0 0 0 0
0 0 0 0

10
8 8 4 16 32 0 0 8 8 8
8 8 4 0 0 8 0 0 0 0
2 0 0 16 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 8 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 8
0 0 0 0 0 0 0 8 0 2

20
1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024
1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024
1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024
1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024
1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024
1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024
1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024
1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024
1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024
1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024
1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024
1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024
1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024
1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024
1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024
1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024
1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024
1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024
1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024
1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024

20
2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2

10
0 0 64 32 32 0 0 0 0 0
0 32 32 64 0 0 0 0 0 0
0 0 128 0 0 0 0 0 0 0
64 64 128 0 0 0 0 0 0 0
0 0 64 32 32 0 0 0 0 0
0 32 32 64 0 0 0 0 0 0
0 0 128 0 0 0 0 0 0 0
64 64 128 0 0 0 0 0 0 0
128 32 2 4 0 0 0 0 0 0
0 0 128 0 0 0 0 0 0 0

20
0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 1 0 1
1 3 0 0 1 3 0 0 1 3 0 0 1 3 0 0 1 3 0 0
0 2 0 0 0 2 0 0 0 2 0 0 0 2 0 0 0 2 0 0
1 0 4 0 1 0 4 0 1 0 4 0 1 0 4 0 1 0 4 0
0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 1 0 1
1 3 0 0 1 3 0 0 1 3 0 0 1 3 0 0 1 3 0 0
0 2 0 0 0 2 0 0 0 2 0 0 0 2 0 0 0 2 0 0
1 0 0 0 1 0 4 0 1 0 4 0 1 0 4 0 1 0 4 0
0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 1 0 1
1 3 0 0 1 3 0 0 1 3 0 0 1 3 0 0 1 3 0 0
0 2 0 0 0 2 0 0 0 2 0 0 0 2 0 0 0 2 0 0
1 0 0 0 1 0 4 0 1 0 4 0 1 0 4 0 1 0 4 0
0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 1 0 1
1 3 0 0 1 3 0 0 1 3 0 0 1 3 0 0 1 3 0 0
0 2 0 0 0 2 0 0 0 2 0 0 0 2 0 0 0 2 0 0
1 0 0 0 1 0 4 0 1 0 4 0 1 0 4 0 1 0 4 0
0 0 8 0 0 0 0 1 0 1 0 0 0 0 0 0 0 1 0 1
1 3 8 0 1 3 0 0 1 3 0 0 1 3 0 0 1 3 0 0
0 2 4 0 0 2 0 0 0 2 0 0 0 2 0 0 0 2 0 0
1 0 4 0 1 0 4 0 1 0 4 0 1 0 4 0 1 0 4 0
"""
